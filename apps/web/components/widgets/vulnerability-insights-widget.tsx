"use client";

import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { GripVerticalIcon, ExternalLinkIcon, CalendarIcon } from "lucide-react";
import { useMetricData } from "@/lib/hooks/use-metric-data";
import {
  useVulnerabilityData,
  useVulnerabilityDataForDate,
} from "@/lib/hooks/use-vulnerability-data";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { useDashboardContext } from "@/contexts/app-context";
import { TimeSeriesPointExtended } from "@/lib/types";

export interface VulnerabilityInsightsWidgetProps {
  widgetId: string;
  className?: string;
}

// Simple vulnerability details panel component
const VulnerabilityDetailsPanel = React.memo<{
  vulnerabilities: any[];
  loading: boolean;
  dateRange: { start: string; end: string } | null;
  hoveredDate: string | null;
}>(function VulnerabilityDetailsPanel({
  vulnerabilities,
  loading,
  dateRange,
  hoveredDate,
}) {
  const isVulnerabilityMatchingHoveredDate = React.useCallback(
    (vuln: any) => {
      if (!hoveredDate || !vuln.dateAdded) return false;
      const vulnDate = new Date(vuln.dateAdded);
      const hoveredDateObj = new Date(hoveredDate);
      return (
        vulnDate.getFullYear() === hoveredDateObj.getFullYear() &&
        vulnDate.getMonth() === hoveredDateObj.getMonth() &&
        vulnDate.getDate() === hoveredDateObj.getDate()
      );
    },
    [hoveredDate]
  );

  if (!dateRange) {
    return (
      <div className="flex-1 flex items-center justify-center text-muted-foreground p-4">
        <div className="text-center space-y-2">
          <CalendarIcon className="h-8 w-8 mx-auto opacity-50" />
          <div className="space-y-1">
            <p className="text-sm font-medium">Loading vulnerability data...</p>
            <p className="text-xs text-muted-foreground">
              Analyzing vulnerabilities across the chart period
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex-1 p-3 space-y-3">
        <div className="flex items-center gap-2">
          <Skeleton className="h-4 w-32" />
          <Skeleton className="h-5 w-16" />
        </div>
        {[1, 2, 3, 4, 5].map((i) => (
          <div key={i} className="p-3 border rounded-lg space-y-2">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-3 w-full" />
            <Skeleton className="h-3 w-3/4" />
          </div>
        ))}
      </div>
    );
  }

  const startDate = new Date(dateRange.start).toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
  const endDate = new Date(dateRange.end).toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });

  const isHovering = hoveredDate !== null;
  const matchingVulnerabilities = vulnerabilities.filter(
    isVulnerabilityMatchingHoveredDate
  );

  return (
    <div className="flex-1 flex flex-col min-h-0">
      <div
        className={`p-3 border-b flex-shrink-0 transition-colors ${
          isHovering ? "bg-blue-50 dark:bg-blue-950/30" : "bg-muted/30"
        }`}
      >
        <div className="flex items-center gap-2">
          <CalendarIcon className="h-4 w-4 text-muted-foreground" />
          <span className="text-sm font-medium">
            All Vulnerabilities: {startDate} - {endDate}
          </span>
          <Badge variant="secondary">{vulnerabilities.length} total</Badge>
          {isHovering && (
            <>
              <Badge variant="outline" className="text-xs">
                {matchingVulnerabilities.length} on{" "}
                {new Date(hoveredDate!).toLocaleDateString("en-US", {
                  month: "short",
                  day: "numeric",
                })}
              </Badge>
              <Badge variant="default" className="text-xs bg-blue-600">
                Highlighting
              </Badge>
            </>
          )}
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-3">
        {vulnerabilities.length === 0 ? (
          <div className="text-center py-6 text-muted-foreground">
            <p className="text-sm">
              No vulnerabilities found in the selected time range
            </p>
          </div>
        ) : (
          <div className="space-y-3">
            {vulnerabilities.map((vuln, index) => {
              const isMatching = isVulnerabilityMatchingHoveredDate(vuln);
              return (
                <div
                  key={index}
                  className={`p-3 border rounded-lg bg-card hover:bg-muted/30 transition-all ${
                    isMatching && isHovering
                      ? "animate-pulse ring-2 ring-blue-400 ring-opacity-50 bg-blue-50 dark:bg-blue-950/30 border-blue-200 dark:border-blue-800"
                      : ""
                  }`}
                >
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 flex-wrap">
                      <a
                        href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cveID}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="font-mono text-blue-600 dark:text-blue-400 hover:underline text-sm font-medium flex items-center gap-1"
                      >
                        {vuln.cveID}
                        <ExternalLinkIcon className="h-3 w-3" />
                      </a>
                      {vuln.knownRansomwareCampaignUse && (
                        <Badge variant="destructive" className="text-xs">
                          ‚ö†Ô∏è Ransomware
                        </Badge>
                      )}
                      {isMatching && isHovering && (
                        <Badge
                          variant="default"
                          className="text-xs bg-blue-600"
                        >
                          üìç Hovered Date
                        </Badge>
                      )}
                    </div>

                    <div className="text-sm">
                      <span className="font-medium text-foreground">
                        {vuln.vendorProject}
                      </span>
                      <span className="text-muted-foreground">
                        {" "}
                        - {vuln.product}
                      </span>
                    </div>

                    <p className="text-xs text-muted-foreground leading-relaxed">
                      {vuln.shortDescription}
                    </p>

                    {vuln.dueDate && (
                      <div className="text-xs">
                        <span className="text-muted-foreground">
                          Due Date:{" "}
                        </span>
                        <span className="text-orange-600 dark:text-orange-400 font-medium">
                          {new Date(vuln.dueDate).toLocaleDateString()}
                        </span>
                      </div>
                    )}

                    <div className="text-xs bg-muted/50 p-2 rounded">
                      <span className="font-medium text-foreground">
                        Required Action:{" "}
                      </span>
                      <span className="text-muted-foreground">
                        {vuln.requiredAction}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
});

// Simple data transformation hook
function useChartData(metricData: any) {
  return React.useMemo(() => {
    if (!metricData?.timeseries) return [];

    return metricData.timeseries.map((point: TimeSeriesPointExtended) => {
      if (point.timestamp && point.value) {
        return {
          name: new Date(point.timestamp).toLocaleDateString("en-US", {
            month: "short",
            day: "numeric",
          }),
          value: point.value,
          timestamp: point.timestamp,
        };
      } else if ("date" in point) {
        const pointData = point as any;
        const dateValue = pointData.date;
        return {
          name: dateValue
            ? new Date(dateValue).toLocaleDateString("en-US", {
                month: "short",
                day: "numeric",
              })
            : "Unknown",
          value: pointData.total || pointData.count || 0,
          timestamp: dateValue,
        };
      }
      return { name: "Unknown", value: 0, timestamp: null };
    });
  }, [metricData]);
}

export const VulnerabilityInsightsWidget = React.memo(
  function VulnerabilityInsightsWidget({
    widgetId,
    className,
  }: VulnerabilityInsightsWidgetProps) {
    // Get widget configuration
    const { dashboard } = useDashboardContext();
    const config = dashboard?.widgets?.find((w) => w.id === widgetId);

    const {
      data: metricData,
      isLoading,
      error,
    } = useMetricData(config?.dataSource || "", config?.metricId || "");

    const [hoveredDate, setHoveredDate] = React.useState<string | null>(null);
    const [dateRange, setDateRange] = React.useState<{
      start: string;
      end: string;
    } | null>(null);

    const { data: allVulnerabilities, isLoading: loadingAllVulns } =
      useVulnerabilityData({
        dataSource: "cisa",
        enabled: !!dateRange,
      });

    const { data: hoveredVulnerabilities } = useVulnerabilityDataForDate(
      hoveredDate,
      !!hoveredDate
    );

    const chartData = useChartData(metricData);

    // Calculate date range when chart data loads
    React.useEffect(() => {
      if (chartData.length > 0) {
        const validPoints = chartData.filter(
          (point: any): point is typeof point & { timestamp: string } =>
            "timestamp" in point && point.timestamp != null
        );
        if (validPoints.length > 0) {
          const timestamps = validPoints.map((point: any) =>
            new Date(point.timestamp).getTime()
          );
          const startTimestamp = Math.min(...timestamps);
          const endTimestamp = Math.max(...timestamps);
          setDateRange({
            start: new Date(startTimestamp).toISOString(),
            end: new Date(endTimestamp).toISOString(),
          });
        }
      }
    }, [chartData]);

    const handleChartHover = React.useCallback((data: any) => {
      if (data && data.timestamp) {
        setHoveredDate(data.timestamp);
      }
    }, []);

    const handleChartLeave = React.useCallback(() => {
      setHoveredDate(null);
    }, []);

    const handleChartMouseMove = React.useCallback(
      (data: any) => {
        if (data && data.activePayload && data.activePayload[0]) {
          handleChartHover(data.activePayload[0].payload);
        }
      },
      [handleChartHover]
    );

    if (isLoading) {
      return (
        <Card className={`${className} h-full flex flex-col overflow-hidden`}>
          <CardHeader className="pb-2 flex-shrink-0">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm font-medium">
                {config?.title}
              </CardTitle>
              <div className="drag-handle cursor-move p-1 hover:bg-muted/50 rounded transition-colors">
                <GripVerticalIcon className="h-4 w-4 text-muted-foreground/50" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="flex-1 flex flex-col min-h-0 p-0 overflow-hidden">
            <div className="h-32 bg-muted animate-pulse m-3 rounded" />
            <div className="flex-1 p-3 space-y-3">
              <Skeleton className="h-4 w-32" />
              {[1, 2].map((i) => (
                <Skeleton key={i} className="h-16 w-full" />
              ))}
            </div>
          </CardContent>
        </Card>
      );
    }

    if (error) {
      return (
        <Card className={`${className} h-full flex flex-col overflow-hidden`}>
          <CardHeader className="pb-2 flex-shrink-0">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm font-medium">
                {config?.title}
              </CardTitle>
              <div className="drag-handle cursor-move p-1 hover:bg-muted/50 rounded transition-colors">
                <GripVerticalIcon className="h-4 w-4 text-muted-foreground/50" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="flex-1 flex items-center justify-center">
            <div className="text-center">
              <span className="text-destructive text-sm font-medium">
                Failed to load data
              </span>
            </div>
          </CardContent>
        </Card>
      );
    }

    return (
      <Card className={`${className} h-full flex flex-col overflow-x-hidden`}>
        <CardHeader className="pb-2 flex-shrink-0">
          <div className="flex items-center justify-between">
            <CardTitle className="text-sm font-medium flex flex-col">
              {config?.title}
              {config?.description && (
                <span className="text-xs text-muted-foreground">
                  {config.description}
                </span>
              )}
            </CardTitle>
            <div className="drag-handle cursor-move p-1 hover:bg-muted/50 rounded transition-colors">
              <GripVerticalIcon className="h-4 w-4 text-muted-foreground/50" />
            </div>
          </div>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col min-h-0 p-0">
          {/* Chart Section */}
          <div className="h-[200px] border-b bg-muted/20">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={chartData}
                margin={{ top: 10, right: 15, left: 15, bottom: 5 }}
                onMouseMove={handleChartMouseMove}
                onMouseLeave={handleChartLeave}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis
                  dataKey="name"
                  fontSize={10}
                  tickMargin={5}
                  axisLine={false}
                  height={20}
                />
                <YAxis
                  fontSize={10}
                  tickMargin={5}
                  axisLine={false}
                  width={25}
                />
                <Tooltip
                  content={({ active, payload, label }) => {
                    if (active && payload && payload.length > 0) {
                      return (
                        <div className="bg-background border border-border rounded-lg shadow-lg p-2">
                          <p className="text-xs font-medium">{`${label} : ${payload[0].value}`}</p>
                          <p className="text-xs text-muted-foreground">
                            Scroll down to view vulnerabilities for this day
                          </p>
                        </div>
                      );
                    }
                    return null;
                  }}
                />
                <Line
                  type="monotone"
                  dataKey="value"
                  stroke="#2563eb"
                  strokeWidth={2}
                  dot={{ fill: "#2563eb", strokeWidth: 2, r: 3 }}
                  activeDot={{ r: 5, stroke: "#2563eb", strokeWidth: 2 }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Vulnerability Details Panel */}
          <div className="flex-1 min-h-0">
            <VulnerabilityDetailsPanel
              vulnerabilities={allVulnerabilities || []}
              loading={loadingAllVulns}
              dateRange={dateRange}
              hoveredDate={hoveredDate}
            />
          </div>
        </CardContent>
      </Card>
    );
  }
);
